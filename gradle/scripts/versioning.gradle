def updateVersion(major, minor, bugfix, suffix, versionCode){

    def currentVersion = project.ext.versionName
    def newVersion = "$major.$minor.$bugfix"
    if (suffix != null) {
        newVersion += "-$suffix"
    }

    def buildFile = file('./build.gradle')
    def buildFileContent = buildFile.getText("UTF-8")
    buildFileContent = buildFileContent.replace("versionName = \"$currentVersion\"", "versionName = \"$newVersion\"")
    buildFileContent = buildFileContent.replace("versionCode = $project.ext.versionCode", "versionCode = $versionCode")
    buildFile.write(buildFileContent)

    updateReadmeFile(newVersion)
}

def updateReadmeFile(version) {
    def readmeFile = file('./README.md')
    def readmeContent = readmeFile.getText("UTF-8")
    def newReadmeContent = readmeContent.split('\n').collect { l ->
        println(l)
        def isVersionShield = l.startsWith('![Version')
        isVersionShield ? "![Version $version](https://img.shields.io/version/${version}.png)" : l
    }.join('\n')
    readmeFile.write(newReadmeContent)
}

def parseVersion() {
    def (major, minor, bugfixWithSuffix) = project.ext.versionName.tokenize(".")
    def (bugfix, suffix) = bugfixWithSuffix.tokenize("-")
    return [Integer.parseInt(major), Integer.parseInt(minor), Integer.parseInt(bugfix), suffix, project.ext.versionCode]
}

task majorVersion {
    doLast {
        def (major, minor, bugfix, suffix, versionCode) = parseVersion()
        versionCode += 1
        major += 1
        updateVersion(major, 0, 0, suffix, versionCode)
    }
}

task minorVersion {
    doLast {
        def (major, minor, bugfix, suffix, versionCode) = parseVersion()
        versionCode += 1
        minor += 1
        updateVersion(major, minor, 0, suffix, versionCode)
    }
}

task bugfixVersion {
    doLast {
        def (major, minor, bugfix, suffix, versionCode) = parseVersion()
        versionCode += 1
        bugfix += 1
        updateVersion(major, minor, bugfix, suffix, versionCode)
    }
}

task updateReadme {
    doLast {
        updateReadmeFile(project.ext.versionName)
    }
}

configure(majorVersion) {
    group = 'versioning'
    description = 'Increase major and versionCode. Reset minor and bugfix version'
}

configure(minorVersion) {
    group = 'versioning'
    description = 'Increase minor and versionCode. Reset bugfix version'
}

configure(bugfixVersion) {
    group = 'versioning'
    description = 'Increase bugfix and versionCode'
}

configure(updateReadme) {
    group = 'versioning'
    description = 'Update Readme Version from gradle project version'
}